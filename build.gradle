import net.minecraftforge.gradle.common.util.Utils

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'

// Make this project depend on all the others
rootProject.subprojects.each {p ->
    if (p == project) return
    evaluationDependsOn p.path
}

// The java version is configurable, but defaults to 17
java.toolchain.languageVersion = JavaLanguageVersion.of(project.ext.find("javaversion") ?: 17)

// Create source sets matching all other projects to stop ForgeGradle from complaining about mismatches
rootProject.subprojects.each {p ->
    if (p == project) return
    p.sourceSets.all(ss -> {
        sourceSets.maybeCreate(ss.name)
    })
}

minecraft {
    // Mappings can be configured directly, but will default to mojmap for the selected version
    var userMappings = project.ext.find("mappings")
    if (userMappings) {
        mappings userMappings
    } else {
        mappings channel: 'official', version: project.ext.mcversion
    }

    // Apply access transformers from all other projects
    var ats = [];
    rootProject.subprojects.each{p ->
        if (p == project) return
        p.pluginManager.withPlugin('net.minecraftforge.gradle') {
            var at = p.minecraft.accessTransformers
            if (at != null) {
                ats.addAll(at);
            }
        }
    }
    accessTransformers ats

    runs {
        client {
            workingDirectory rootProject.file('run/client')
            buildAllProjects true
        }
        server {
            workingDirectory rootProject.file('run/server')
            buildAllProjects true
        }
    }

    runs.all {
        ideaModule "${rootProject.name}${project.path}.main".replace(":", ".")

        // Apply user-provided properties to all runs, or the default ones if not specified
        var userProps = project.ext.find("runProps")
        if (userProps) {
            userProps.every { e ->
                property e.key, e.value
            }
        } else {
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        }

        // Apply user-provided arguments to all runs
        var userRunArgs = project.ext.find("runArgs")
        if (userRunArgs) {
            args userRunArgs
        }
    }

    // Add datagen runs
    rootProject.subprojects.each {p ->
        if (p == project) return
        p.pluginManager.withPlugin('net.minecraftforge.gradle') {
            var r = p.minecraft.runs.findByName("data");
            if (r == null) return
            runs.create("data" + Utils.capitalize(p.name)) {
                // We have to copy everything manually because of potentially different classpaths
                // when using different plugins per project (ie. mixin vs no mixin)
                environment r.environment
                main r.main
                args r.args
                jvmArgs r.jvmArgs
                singleInstance r.singleInstance
                properties r.properties
                workingDirectory rootProject.file('run/data')
                forceExit r.forceExit
                tokens r.tokens
                lazyTokens r.lazyTokens
                buildAllProjects true
            }
        }
    }

    // Add all the mods to the run configurations
    runs.each {run ->
        rootProject.subprojects.each {p ->
            if (p == project) return
            p.pluginManager.withPlugin('net.minecraftforge.gradle') {
                var runName = run.name.startsWith("data") ? "data" : run.name
                var r = p.minecraft.runs.findByName(runName)
                if (r == null) return
                run.sources.addAll(r.sources)

                r.mods.each {config ->
                    if (run.mods.findByName(config.name) == null) {
                        run.mods.create(config.name) {
                            classes = config.classes
                            sources = config.sources
                            resources = config.resources
                        }
                    }
                }

                // On data generation runs, also copy the existing assets references over
                if (runName == "data") {
                    r.args.eachWithIndex {arg, i ->
                        if (arg == "--existing") {
                            run.args.add(arg)
                            run.args.add(r.args[i + 1])
                        }
                    }
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.ext.mcversion}-${project.ext.forgeversion}"

    // Add all the mods as runtime dependencies
    rootProject.subprojects.each {p ->
        if (p == project) return
        p.pluginManager.withPlugin('net.minecraftforge.gradle') {
            runtimeOnly p
        }
    }
}
